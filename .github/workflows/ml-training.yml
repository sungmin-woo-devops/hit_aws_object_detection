name: Model Training Pipeline

on:
  workflow_dispatch:  # 수동 실행
    inputs:
      model_version:
        description: 'Model version to train'
        required: true
        default: 'v1.0.0'
      dataset_version:
        description: 'Dataset version'
        required: true
        default: 'latest'
      training_config:
        description: 'Training configuration'
        required: true
        default: 'yolo_config.yaml'
    schedule:
      - cron: '0 2 * * 1'
  
env:
  PYTHON_VERSION: '3.10'
  AWS_REGION: 'ap-northeast-2'

jobs:
  setup-training-environemtn:
    name: Setup Training Environment
    runs-on: ubuntu-latest
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: miniosecret
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data
        command: server /data
    
    outputs:
      training-id: ${{ steps.generate-id.outputs.training-id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate training ID
      id: generate-id
      run: |
        TRAINING_ID="train-$(date +%Y%m%d-%H%M%S)-${{ github.sha }}"
        echo "training-id=$TRAINING_ID" >> $GITHUB_OUTPUT
        echo "Training ID: $TRAINING_ID"
        
    - name: Setup MinIO client
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
    - name: Configure MinIO
      run: |
        mc alias set myminio http://localhost:9000 minioadmin minioadmin123
        mc mb myminio/aws-diagram-object-detection --ignore-existing
        mc policy set public myminio/aws-diagram-object-detection

  data-preparation:
    name: Data Preparation
    runs-on: ubuntu-latest
    needs: setup-training-environment
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data
        command: server /data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r training-pipeline/requirements.txt
        pip install boto3 click
        
    - name: Setup MinIO client
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
    - name: Configure MinIO
      run: |
        mc alias set myminio http://localhost:9000 minioadmin minioadmin123
        mc mb myminio/aws-diagram-object-detection --ignore-existing
        
    - name: Download and prepare dataset
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        cd training-pipeline
        python scripts/data_preprocessing.py \
          --dataset-version ${{ inputs.dataset_version || 'latest' }} \
          --output-dir ./data/processed
          
    - name: Validate dataset
      run: |
        cd training-pipeline
        python scripts/validate_dataset.py --data-dir ./data/processed
        
    - name: Upload processed data to MinIO
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        cd training-pipeline
        python -c "
        import sys
        sys.path.append('../utils')
        from minio_client import MinIOClient
        client = MinIOClient()
        success = client.upload_directory(
            './data/processed',
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}/data'
        )
        exit(0 if success else 1)
        "

  train-model:
    name: Train YOLOv8 Model
    runs-on: ubuntu-latest
    needs: [setup-training-environment, data-preparation]
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data
        command: server /data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r training-pipeline/requirements.txt
        pip install boto3
        
    - name: Setup MinIO client
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
    - name: Configure MinIO
      run: |
        mc alias set myminio http://localhost:9000 minioadmin minioadmin123
        mc mb myminio/aws-diagram-object-detection --ignore-existing
        
    - name: Download training data from MinIO
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        cd training-pipeline
        python -c "
        import sys
        sys.path.append('../utils')
        from minio_client import MinIOClient
        client = MinIOClient()
        success = client.download_directory(
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}/data',
            './data/processed'
        )
        exit(0 if success else 1)
        "
          
    - name: Train model
      run: |
        cd training-pipeline
        python train.py \
          --config configs/${{ inputs.training_config || 'yolo_config.yaml' }} \
          --data-dir ./data/processed \
          --output-dir ./outputs \
          --model-version ${{ inputs.model_version || 'v1.0.0' }} \
          --training-id ${{ needs.setup-training-environment.outputs.training-id }}
          
    - name: Upload training outputs to MinIO
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        cd training-pipeline
        python -c "
        import sys
        sys.path.append('../utils')
        from minio_client import MinIOClient
        client = MinIOClient()
        success = client.upload_directory(
            './outputs',
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}/outputs'
        )
        exit(0 if success else 1)
        "
          
    - name: Save training artifacts
      uses: actions/upload-artifact@v3
      with:
        name: training-artifacts-${{ needs.setup-training-environment.outputs.training-id }}
        path: |
          training-pipeline/outputs/
          !training-pipeline/outputs/weights/
        retention-days: 30

  validate-model:
    name: Validate Model Performance
    runs-on: ubuntu-latest
    needs: [setup-training-environment, train-model]
    
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin123
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        volumes:
          - /tmp/minio-data:/data
        command: server /data
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r training-pipeline/requirements.txt
        pip install boto3
        
    - name: Setup MinIO client
      run: |
        wget https://dl.min.io/client/mc/release/linux-amd64/mc
        chmod +x mc
        sudo mv mc /usr/local/bin/
        
    - name: Configure MinIO
      run: |
        mc alias set myminio http://localhost:9000 minioadmin minioadmin123
        mc mb myminio/aws-diagram-object-detection --ignore-existing
        
    - name: Download model and test data from MinIO
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        mkdir -p ./training_results
        cd training-pipeline
        python -c "
        import sys
        sys.path.append('../utils')
        from minio_client import MinIOClient
        client = MinIOClient()
        # Download training results
        success = client.download_directory(
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}',
            '../training_results'
        )
        exit(0 if success else 1)
        "
          
    - name: Run model validation
      run: |
        cd training-pipeline
        python validate.py \
          --model-path ../training_results/outputs/weights/best.pt \
          --test-data ../training_results/data/test \
          --output-dir ./validation_results \
          --min-map50 0.8  # 최소 mAP@0.5 임계값
          
    - name: Generate validation report
      run: |
        cd training-pipeline
        python scripts/generate_report.py \
          --validation-results ./validation_results \
          --output validation_report.html
          
    - name: Upload validation results to MinIO
      env:
        MINIO_ENDPOINT: http://localhost:9000
        AWS_ACCESS_KEY_ID: minioadmin
        AWS_SECRET_ACCESS_KEY: minioadmin123
        S3_BUCKET: aws-diagram-object-detection
      run: |
        cd training-pipeline
        python -c "
        import sys
        sys.path.append('../utils')
        from minio_client import MinIOClient
        client = MinIOClient()
        # Upload validation results
        client.upload_file(
            './validation_results/validation_metrics.json',
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}/outputs/validation_metrics.json'
        )
        client.upload_file(
            './validation_report.html',
            'training_results/${{ needs.setup-training-environment.outputs.training-id }}/outputs/validation_report.html'
        )
        "
          
    - name: Upload validation results as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: validation-report-${{ needs.setup-training-environment.outputs.training-id }}
        path: training-pipeline/validation_report.html